# Generated by Django 5.1.3 on 2025-06-04 18:05

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('practitioners', '0002_initial'),
        ('services', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('name', models.CharField(help_text='Package name', max_length=255)),
                ('description', models.TextField(help_text='What this package includes and benefits')),
                ('price', models.DecimalField(decimal_places=2, help_text='Total package price', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('original_price', models.DecimalField(decimal_places=2, help_text='Sum of individual service prices (for showing savings)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('validity_days', models.PositiveIntegerField(default=365, help_text='How many days the package is valid after purchase')),
                ('is_transferable', models.BooleanField(default=False, help_text='Whether package can be transferred to another user')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, help_text='Searchable tags', null=True)),
                ('terms_conditions', models.TextField(blank=True, help_text='Specific terms for this package', null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='packages', to='services.servicecategory')),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to='practitioners.practitioner')),
            ],
            options={
                'verbose_name': 'Package',
                'verbose_name_plural': 'Packages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PackageService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, help_text='Number of times this service is included', validators=[django.core.validators.MinValueValidator(1)])),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order within package')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Whether this service must be used (vs optional)')),
                ('notes', models.CharField(blank=True, help_text='Special notes about this service in the package', max_length=255, null=True)),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='package_services', to='services.package')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_packages', to='services.service')),
            ],
            options={
                'verbose_name': 'Package Service',
                'verbose_name_plural': 'Package Services',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Bundle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('name', models.CharField(help_text='Bundle name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Bundle description and benefits', null=True)),
                ('sessions_included', models.PositiveIntegerField(help_text='Number of sessions included in bundle', validators=[django.core.validators.MinValueValidator(2)])),
                ('bonus_sessions', models.PositiveIntegerField(default=0, help_text='Additional free sessions (e.g., buy 5 get 1 free)')),
                ('price', models.DecimalField(decimal_places=2, help_text='Total bundle price', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('validity_days', models.PositiveIntegerField(default=365, help_text='Days valid after purchase')),
                ('is_shareable', models.BooleanField(default=False, help_text='Whether bundle can be shared with family/friends')),
                ('max_per_customer', models.PositiveIntegerField(blank=True, help_text='Maximum bundles one customer can purchase', null=True)),
                ('available_from', models.DateTimeField(blank=True, help_text='When bundle becomes available', null=True)),
                ('available_until', models.DateTimeField(blank=True, help_text='When bundle sales end', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('highlight_text', models.CharField(blank=True, help_text="e.g., 'BEST VALUE' or 'SAVE 20%'", max_length=50, null=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bundles', to='services.service')),
            ],
            options={
                'verbose_name': 'Bundle',
                'verbose_name_plural': 'Bundles',
                'ordering': ['service', 'sessions_included'],
                'indexes': [models.Index(fields=['service', 'is_active'], name='services_bu_service_c8185a_idx'), models.Index(fields=['is_featured', 'is_active'], name='services_bu_is_feat_de4ae8_idx'), models.Index(fields=['available_from', 'available_until'], name='services_bu_availab_c23223_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['practitioner', 'is_active'], name='services_pa_practit_d17c3d_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['category', 'is_active'], name='services_pa_categor_3d08f6_idx'),
        ),
        migrations.AddIndex(
            model_name='package',
            index=models.Index(fields=['is_featured', 'is_active'], name='services_pa_is_feat_8974e4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='packageservice',
            unique_together={('package', 'service')},
        ),
    ]
