# Generated by Django 5.1.3 on 2025-06-04 16:07

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0004_initial'),
        ('practitioners', '0001_initial'),
        ('rooms', '0001_initial'),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Waitlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('notified', 'Notified'), ('converted', 'Converted'), ('expired', 'Expired'), ('removed', 'Removed')], default='waiting', max_length=20)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('notification_count', models.PositiveIntegerField(default=0)),
                ('last_notification', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'waitlists',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['order', 'name'],
                'indexes': [models.Index(fields=['is_active', 'order'], name='services_se_is_acti_32bf00_idx')],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('name', models.CharField(help_text='Service name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed service description', null=True)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for listings', max_length=500, null=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in USD', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('max_participants', models.PositiveIntegerField(default=1, help_text='Maximum number of participants', validators=[django.core.validators.MinValueValidator(1)])),
                ('min_participants', models.PositiveIntegerField(default=1, help_text='Minimum participants to run service', validators=[django.core.validators.MinValueValidator(1)])),
                ('experience_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], default='all_levels', max_length=20)),
                ('age_min', models.PositiveIntegerField(blank=True, help_text='Minimum age', null=True)),
                ('age_max', models.PositiveIntegerField(blank=True, help_text='Maximum age', null=True)),
                ('location_type', models.CharField(choices=[('virtual', 'Virtual'), ('in_person', 'In Person'), ('hybrid', 'Hybrid')], default='virtual', max_length=20)),
                ('what_youll_learn', models.TextField(blank=True, help_text='Learning outcomes and benefits', null=True)),
                ('prerequisites', models.TextField(blank=True, help_text='What participants need before joining', null=True)),
                ('includes', models.JSONField(blank=True, help_text="What's included in the service", null=True)),
                ('image_url', models.URLField(blank=True, help_text='Service image', null=True)),
                ('video_url', models.URLField(blank=True, help_text='Promotional video', null=True)),
                ('tags', models.JSONField(blank=True, help_text='Searchable tags', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True, help_text='Whether service is publicly visible')),
                ('languages', models.ManyToManyField(blank=True, related_name='services', to='utils.language')),
                ('location', models.ForeignKey(blank=True, help_text='Physical location for in-person/hybrid services', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='utils.location')),
                ('primary_practitioner', models.ForeignKey(help_text='Main practitioner for this service', on_delete=django.db.models.deletion.CASCADE, related_name='primary_services', to='practitioners.practitioner')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory')),
            ],
        ),
        migrations.CreateModel(
            name='ServicePractitioner',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_primary', models.BooleanField(default=False, help_text='If True, this practitioner is the primary owner of the service')),
                ('role', models.CharField(blank=True, help_text='The role of the practitioner in this service', max_length=100, null=True)),
                ('revenue_share_percentage', models.DecimalField(decimal_places=2, default=100.0, help_text='Percentage of revenue this practitioner receives from this service', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_relationships', to='practitioners.practitioner')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practitioner_relationships', to='services.service')),
            ],
            options={
                'ordering': ['-is_primary', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='additional_practitioners',
            field=models.ManyToManyField(blank=True, help_text='Additional practitioners involved in this service', related_name='services', through='services.ServicePractitioner', to='practitioners.practitioner'),
        ),
        migrations.CreateModel(
            name='ServiceRelationship',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.SmallIntegerField(default=1, help_text='Number of this service included in the package/bundle')),
                ('order', models.SmallIntegerField(default=0, help_text='Order of this service in a course or bundle')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount percentage when this service is purchased as part of the parent', max_digits=5)),
                ('is_required', models.BooleanField(default=True, help_text='Whether this service is required as part of the parent')),
                ('description_override', models.TextField(blank=True, help_text='Custom description when part of this parent service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_relationships', to='services.service')),
                ('parent_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_relationships', to='services.service')),
            ],
            options={
                'db_table': 'service_relationships',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('current_participants', models.IntegerField(default=0)),
                ('sequence_number', models.PositiveIntegerField(default=0)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agenda', models.TextField(blank=True, null=True)),
                ('what_youll_learn', models.TextField(blank=True, help_text='Describe what clients will learn or gain from this specific session', null=True)),
                ('location', models.ForeignKey(blank=True, help_text='Location where this session takes place (for in-person sessions)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='utils.location')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_sessions', to='rooms.room')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='services.service')),
            ],
            options={
                'db_table': 'service_sessions',
                'ordering': ['start_time', 'sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='ServiceBenefit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for UI display', max_length=50, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='benefits', to='services.service')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='benefits', to='services.servicesession')),
            ],
            options={
                'db_table': 'service_benefits',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('code', models.CharField(help_text="Unique code for this service type (e.g., 'session', 'workshop')", max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='service_types', to='services.servicecategory')),
            ],
            options={
                'verbose_name': 'Service Type',
                'verbose_name_plural': 'Service Types',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='service_type',
            field=models.ForeignKey(help_text='Type of service', on_delete=django.db.models.deletion.PROTECT, to='services.servicetype'),
        ),
        migrations.CreateModel(
            name='SessionAgendaItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agenda_items', to='services.service')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agenda_items', to='services.servicesession')),
            ],
            options={
                'db_table': 'session_agenda_items',
                'ordering': ['order', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('attendance_status', models.CharField(default='registered', max_length=20)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bookings.booking')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='services.servicesession')),
            ],
            options={
                'db_table': 'session_participants',
            },
        ),
    ]
