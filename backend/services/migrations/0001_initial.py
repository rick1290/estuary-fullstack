# Generated by Django 5.1.3 on 2025-06-10 04:01

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0005_initial'),
        ('practitioners', '0001_initial'),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceSession',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Duration in minutes', null=True)),
                ('max_participants', models.IntegerField(blank=True, null=True)),
                ('current_participants', models.IntegerField(default=0)),
                ('sequence_number', models.PositiveIntegerField(default=0)),
                ('price_cents', models.IntegerField(blank=True, help_text='Price override in cents', null=True)),
                ('status', models.CharField(default='scheduled', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agenda', models.TextField(blank=True, null=True)),
                ('what_youll_learn', models.TextField(blank=True, help_text='Describe what clients will learn or gain from this specific session', null=True)),
            ],
            options={
                'db_table': 'service_sessions',
                'ordering': ['start_time', 'sequence_number'],
            },
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('code', models.CharField(help_text="Unique code for this service type (e.g., 'session', 'workshop')", max_length=20, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
            ],
            options={
                'verbose_name': 'Service Type',
                'verbose_name_plural': 'Service Types',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SessionAgendaItem',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'session_agenda_items',
                'ordering': ['order', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='SessionParticipant',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('attendance_status', models.CharField(default='registered', max_length=20)),
                ('check_in_time', models.DateTimeField(blank=True, null=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'session_participants',
            },
        ),
        migrations.CreateModel(
            name='Waitlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('notified', 'Notified'), ('converted', 'Converted'), ('expired', 'Expired'), ('removed', 'Removed')], default='waiting', max_length=20)),
                ('notified_at', models.DateTimeField(blank=True, null=True)),
                ('notification_count', models.PositiveIntegerField(default=0)),
                ('last_notification', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'waitlists',
                'ordering': ['position'],
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('name', models.CharField(help_text='Service name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed service description', null=True)),
                ('short_description', models.CharField(blank=True, help_text='Brief description for listings', max_length=500, null=True)),
                ('price_cents', models.IntegerField(help_text='Price in cents (e.g., 10000 = $100.00)', validators=[django.core.validators.MinValueValidator(0)])),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('max_participants', models.PositiveIntegerField(default=1, help_text='Maximum number of participants', validators=[django.core.validators.MinValueValidator(1)])),
                ('min_participants', models.PositiveIntegerField(default=1, help_text='Minimum participants to run service', validators=[django.core.validators.MinValueValidator(1)])),
                ('experience_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('all_levels', 'All Levels')], default='all_levels', max_length=20)),
                ('age_min', models.PositiveIntegerField(blank=True, help_text='Minimum age', null=True)),
                ('age_max', models.PositiveIntegerField(blank=True, help_text='Maximum age', null=True)),
                ('location_type', models.CharField(choices=[('virtual', 'Virtual'), ('in_person', 'In Person'), ('hybrid', 'Hybrid')], default='virtual', max_length=20)),
                ('what_youll_learn', models.TextField(blank=True, help_text='Learning outcomes and benefits', null=True)),
                ('prerequisites', models.TextField(blank=True, help_text='What participants need before joining', null=True)),
                ('includes', models.JSONField(blank=True, help_text="What's included in the service", null=True)),
                ('image_url', models.URLField(blank=True, help_text='Service image', null=True)),
                ('video_url', models.URLField(blank=True, help_text='Promotional video', null=True)),
                ('tags', models.JSONField(blank=True, help_text='Searchable tags', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True, help_text='Whether service is publicly visible')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('paused', 'Paused'), ('discontinued', 'Discontinued')], default='draft', help_text='Service publication status', max_length=20)),
                ('published_at', models.DateTimeField(blank=True, help_text='When service was first published', null=True)),
                ('validity_days', models.PositiveIntegerField(default=365, help_text='Days valid after purchase (for bundles/packages)')),
                ('is_transferable', models.BooleanField(default=False, help_text='Whether bundle/package can be transferred to another user')),
                ('is_shareable', models.BooleanField(default=False, help_text='Whether bundle can be shared with family/friends')),
                ('sessions_included', models.PositiveIntegerField(blank=True, help_text='Number of sessions in bundle (for bundle type only)', null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('bonus_sessions', models.PositiveIntegerField(default=0, help_text='Additional free sessions in bundle')),
                ('max_per_customer', models.PositiveIntegerField(blank=True, help_text='Maximum purchases per customer (for bundles)', null=True)),
                ('available_from', models.DateTimeField(blank=True, help_text='When this becomes available for purchase', null=True)),
                ('available_until', models.DateTimeField(blank=True, help_text='When sales end', null=True)),
                ('highlight_text', models.CharField(blank=True, help_text="e.g., 'BEST VALUE' or 'SAVE 20%'", max_length=50, null=True)),
                ('terms_conditions', models.TextField(blank=True, help_text='Specific terms for packages/bundles', null=True)),
                ('address', models.ForeignKey(blank=True, help_text='Physical address for in-person/hybrid services', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='utils.address')),
                ('languages', models.ManyToManyField(blank=True, related_name='services', to='utils.language')),
                ('primary_practitioner', models.ForeignKey(help_text='Main practitioner for this service', on_delete=django.db.models.deletion.CASCADE, related_name='primary_services', to='practitioners.practitioner')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceBenefit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier for UI display', max_length=50, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='benefits', to='services.service')),
            ],
            options={
                'db_table': 'service_benefits',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly version of name', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False, help_text='Whether to feature this category')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'ordering': ['order', 'name'],
                'indexes': [models.Index(fields=['is_active', 'order'], name='services_se_is_acti_32bf00_idx'), models.Index(fields=['slug'], name='services_se_slug_89aee3_idx'), models.Index(fields=['is_featured'], name='services_se_is_feat_113678_idx')],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services', to='services.servicecategory'),
        ),
        migrations.CreateModel(
            name='ServicePractitioner',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('is_primary', models.BooleanField(default=False, help_text='If True, this practitioner is the primary owner of the service')),
                ('role', models.CharField(blank=True, help_text='The role of the practitioner in this service', max_length=100, null=True)),
                ('revenue_share_percentage', models.DecimalField(decimal_places=2, default=100.0, help_text='Percentage of revenue this practitioner receives from this service', max_digits=5)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_relationships', to='practitioners.practitioner')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='practitioner_relationships', to='services.service')),
            ],
            options={
                'ordering': ['-is_primary', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='additional_practitioners',
            field=models.ManyToManyField(blank=True, help_text='Additional practitioners involved in this service', related_name='services', through='services.ServicePractitioner', to='practitioners.practitioner'),
        ),
        migrations.CreateModel(
            name='ServiceRelationship',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('quantity', models.SmallIntegerField(default=1, help_text='Number of this service included in the package/bundle')),
                ('order', models.SmallIntegerField(default=0, help_text='Order of this service in a course or bundle')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Discount percentage when this service is purchased as part of the parent', max_digits=5)),
                ('is_required', models.BooleanField(default=True, help_text='Whether this service is required as part of the parent')),
                ('description_override', models.TextField(blank=True, help_text='Custom description when part of this parent service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_relationships', to='services.service')),
                ('parent_service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_relationships', to='services.service')),
            ],
            options={
                'db_table': 'service_relationships',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ServiceResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('resource_type', models.CharField(choices=[('post', 'Text Post'), ('document', 'Document'), ('video', 'Video'), ('image', 'Image'), ('link', 'External Link'), ('audio', 'Audio')], max_length=20)),
                ('attachment_level', models.CharField(choices=[('service', 'Service Default'), ('session', 'Session Specific'), ('booking', 'Booking Specific')], max_length=20)),
                ('content', models.TextField(blank=True, help_text='For text posts and rich content', null=True)),
                ('file_url', models.URLField(blank=True, help_text='URL to uploaded file (S3/CDN)', null=True)),
                ('external_url', models.URLField(blank=True, help_text='External video/link URL', null=True)),
                ('file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('file_size', models.IntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('file_type', models.CharField(blank=True, help_text='MIME type', max_length=50, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='For video/audio resources', null=True)),
                ('access_level', models.CharField(choices=[('public', 'Public'), ('registered', 'Registered Users'), ('enrolled', 'Enrolled Only'), ('completed', 'Post-Completion'), ('private', 'Private')], default='enrolled', max_length=20)),
                ('is_downloadable', models.BooleanField(default=True, help_text='Allow downloads for files')),
                ('available_from', models.DateTimeField(blank=True, help_text='When resource becomes available', null=True)),
                ('available_until', models.DateTimeField(blank=True, help_text='When resource expires', null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, null=True)),
                ('personal_note', models.TextField(blank=True, help_text="Practitioner's note to specific client", null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='bookings.booking')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='services.service')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='practitioners.practitioner')),
            ],
            options={
                'ordering': ['order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceResourceAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('action', models.CharField(choices=[('view', 'Viewed'), ('download', 'Downloaded')], max_length=20)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='services.serviceresource')),
            ],
        ),
    ]
