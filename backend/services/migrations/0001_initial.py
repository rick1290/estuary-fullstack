# Generated by Django 5.1.7 on 2025-03-24 06:13

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("bookings", "0002_initial"),
        ("practitioners", "0001_initial"),
        ("rooms", "0001_initial"),
        ("utils", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Location",
            fields=[
                ("id", models.BigIntegerField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                (
                    "address_line1",
                    models.CharField(
                        blank=True,
                        help_text="Street address",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "address_line2",
                    models.CharField(
                        blank=True,
                        help_text="Apt, Suite, etc.",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("city", models.CharField(blank=True, max_length=100, null=True)),
                ("state", models.CharField(blank=True, max_length=100, null=True)),
                ("postal_code", models.CharField(blank=True, max_length=20, null=True)),
                (
                    "country",
                    models.CharField(
                        blank=True, default="United States", max_length=100, null=True
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True, decimal_places=6, max_digits=9, null=True
                    ),
                ),
                (
                    "place_id",
                    models.CharField(
                        blank=True,
                        help_text="Google Maps Place ID",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                "db_table": "locations",
                "db_table_comment": "Location of service with Google Maps integration",
            },
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                ("id", models.SmallAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50)),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="Unique code for this service type (e.g., 'session', 'workshop')",
                        max_length=20,
                        null=True,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "service_types",
                "db_table_comment": "Base Table For Service Type",
            },
        ),
        migrations.CreateModel(
            name="Waitlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("position", models.PositiveIntegerField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting"),
                            ("notified", "Notified"),
                            ("converted", "Converted"),
                            ("expired", "Expired"),
                            ("removed", "Removed"),
                        ],
                        default="waiting",
                        max_length=20,
                    ),
                ),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("notification_count", models.PositiveIntegerField(default=0)),
                ("last_notification", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "waitlists",
                "ordering": ["position"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                ("order", models.SmallIntegerField(blank=True, null=True)),
                ("is_archived", models.BooleanField(blank=True, null=True)),
                ("is_hidden", models.BooleanField(blank=True, null=True)),
                ("created_at", models.DateTimeField()),
                (
                    "practitioner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="practitioners.practitioner",
                    ),
                ),
            ],
            options={
                "db_table": "categories",
                "db_table_comment": "This is a category or container that a package or service can live inside.",
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("duration", models.IntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_featured", models.BooleanField(default=False)),
                ("max_participants", models.PositiveIntegerField(default=1)),
                ("min_participants", models.PositiveIntegerField(default=1)),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("virtual", "Virtual"),
                            ("in_person", "In Person"),
                            ("hybrid", "Hybrid"),
                        ],
                        default="virtual",
                        max_length=20,
                    ),
                ),
                (
                    "physical_location",
                    models.JSONField(
                        blank=True,
                        help_text="Legacy location data in JSON format",
                        null=True,
                    ),
                ),
                ("tags", models.JSONField(blank=True, null=True)),
                ("image_url", models.URLField(blank=True, null=True)),
                (
                    "average_rating",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=3, null=True
                    ),
                ),
                ("total_reviews", models.PositiveIntegerField(default=0)),
                ("total_bookings", models.PositiveIntegerField(default=0)),
                (
                    "experience_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("all_levels", "All Levels"),
                        ],
                        default="all_levels",
                        max_length=20,
                    ),
                ),
                (
                    "what_youll_learn",
                    models.TextField(
                        blank=True,
                        help_text="Describe what clients will learn or gain from this service",
                        null=True,
                    ),
                ),
                (
                    "languages",
                    models.ManyToManyField(
                        blank=True, related_name="services", to="utils.language"
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Structured location where this service is provided (for in-person and hybrid services)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="services",
                        to="services.location",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        blank=True,
                        help_text="DEPRECATED: Use practitioners M2M field instead. This field is kept for backward compatibility.",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="services_as_primary",
                        to="practitioners.practitioner",
                    ),
                ),
            ],
            options={
                "db_table": "services",
            },
        ),
        migrations.CreateModel(
            name="ParentServiceCategoryRelation",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("quantity", models.SmallIntegerField(blank=True, null=True)),
                ("order", models.SmallIntegerField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="services.category",
                    ),
                ),
                (
                    "service",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="services.service",
                    ),
                ),
            ],
            options={
                "db_table": "parent_service_category_relations",
                "db_table_comment": "This is a duplicate of new_relation_service_category",
            },
        ),
        migrations.CreateModel(
            name="ServiceCategory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.SlugField(max_length=255, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("order", models.PositiveIntegerField(default=0)),
                ("is_active", models.BooleanField(default=True)),
                ("icon", models.CharField(blank=True, max_length=50, null=True)),
                ("image_url", models.URLField(blank=True, null=True)),
                (
                    "is_system",
                    models.BooleanField(
                        default=False,
                        help_text="If True, this is a system-defined category that cannot be modified by practitioners",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="services.servicecategory",
                    ),
                ),
                (
                    "practitioner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="categories",
                        to="practitioners.practitioner",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Service categories",
                "db_table": "service_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.AddField(
            model_name="service",
            name="category",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="services",
                to="services.servicecategory",
            ),
        ),
        migrations.CreateModel(
            name="ServiceCategoryRelation",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("quantity", models.SmallIntegerField(blank=True, null=True)),
                ("order", models.SmallIntegerField(blank=True, null=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="services.category",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="services.service",
                    ),
                ),
            ],
            options={
                "db_table": "service_category_relations",
                "db_table_comment": "This is a duplicate of new_relation_service_package",
            },
        ),
        migrations.CreateModel(
            name="ServicePractitioner",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="If True, this practitioner is the primary owner of the service",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="The role of the practitioner in this service",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "revenue_share_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Percentage of revenue this practitioner receives from this service",
                        max_digits=5,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "practitioner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_relationships",
                        to="practitioners.practitioner",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="practitioner_relationships",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "db_table": "service_practitioners",
                "ordering": ["-is_primary", "created_at"],
            },
        ),
        migrations.AddField(
            model_name="service",
            name="practitioners",
            field=models.ManyToManyField(
                blank=True,
                related_name="services",
                through="services.ServicePractitioner",
                to="practitioners.practitioner",
            ),
        ),
        migrations.CreateModel(
            name="ServiceRelationship",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "quantity",
                    models.SmallIntegerField(
                        default=1,
                        help_text="Number of this service included in the package/bundle",
                    ),
                ),
                (
                    "order",
                    models.SmallIntegerField(
                        default=0,
                        help_text="Order of this service in a course or bundle",
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Discount percentage when this service is purchased as part of the parent",
                        max_digits=5,
                    ),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this service is required as part of the parent",
                    ),
                ),
                (
                    "description_override",
                    models.TextField(
                        blank=True,
                        help_text="Custom description when part of this parent service",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "child_service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parent_relationships",
                        to="services.service",
                    ),
                ),
                (
                    "parent_service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_relationships",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "db_table": "service_relationships",
                "ordering": ["order", "id"],
            },
        ),
        migrations.CreateModel(
            name="ServiceSession",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, help_text="Duration in minutes", null=True
                    ),
                ),
                ("max_participants", models.IntegerField(blank=True, null=True)),
                ("current_participants", models.IntegerField(default=0)),
                ("sequence_number", models.PositiveIntegerField(default=0)),
                (
                    "price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("status", models.CharField(default="scheduled", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("agenda", models.TextField(blank=True, null=True)),
                (
                    "what_youll_learn",
                    models.TextField(
                        blank=True,
                        help_text="Describe what clients will learn or gain from this specific session",
                        null=True,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Location where this session takes place (for in-person sessions)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions",
                        to="services.location",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_sessions",
                        to="rooms.room",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="services.service",
                    ),
                ),
            ],
            options={
                "db_table": "service_sessions",
                "ordering": ["start_time", "sequence_number"],
            },
        ),
        migrations.CreateModel(
            name="ServiceBenefit",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon identifier for UI display",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benefits",
                        to="services.service",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="benefits",
                        to="services.servicesession",
                    ),
                ),
            ],
            options={
                "db_table": "service_benefits",
                "ordering": ["order", "id"],
            },
        ),
        migrations.AddField(
            model_name="service",
            name="service_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="services.servicetype",
            ),
        ),
        migrations.CreateModel(
            name="SessionAgendaItem",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField()),
                ("order", models.PositiveIntegerField(default=0)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agenda_items",
                        to="services.servicesession",
                    ),
                ),
            ],
            options={
                "db_table": "session_agenda_items",
                "ordering": ["order", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="SessionParticipant",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "attendance_status",
                    models.CharField(default="registered", max_length=20),
                ),
                ("check_in_time", models.DateTimeField(blank=True, null=True)),
                ("check_out_time", models.DateTimeField(blank=True, null=True)),
                (
                    "booking",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bookings.booking",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="services.servicesession",
                    ),
                ),
            ],
            options={
                "db_table": "session_participants",
            },
        ),
    ]
