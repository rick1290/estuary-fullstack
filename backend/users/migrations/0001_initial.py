# Generated by Django 5.1.3 on 2025-06-04 16:07

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_use_email_as_username.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('practitioners', '0001_initial'),
        ('utils', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number in international format', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('phone_number_verified', models.BooleanField(default=False)),
                ('timezone', models.CharField(default='UTC', help_text='User\'s preferred timezone (e.g., "America/New_York", "Europe/London")', max_length=50)),
                ('is_practitioner', models.BooleanField(default=False)),
                ('account_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('pending', 'Pending Verification'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django_use_email_as_username.models.BaseUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserFavoritePractitioner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('practitioner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='practitioners.practitioner')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite_practitioners', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user favorite practitioner',
                'verbose_name_plural': 'user favorite practitioners',
            },
        ),
        migrations.CreateModel(
            name='UserPaymentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('stripe_account_id', models.CharField(blank=True, max_length=255, null=True)),
                ('billing_address', models.JSONField(blank=True, help_text='Structured billing address', null=True)),
                ('default_currency', models.CharField(default='USD', help_text='ISO 4217 currency code', max_length=3)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user payment profile',
                'verbose_name_plural': 'user payment profiles',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('display_name', models.CharField(blank=True, help_text='Public display name', max_length=255, null=True)),
                ('bio', models.TextField(blank=True, max_length=1000, null=True)),
                ('avatar_url', models.URLField(blank=True, help_text='URL to profile image', null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('non_binary', 'Non-binary'), ('prefer_not_to_say', 'Prefer not to say'), ('other', 'Other')], max_length=20, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('phone_verification_token', models.CharField(blank=True, max_length=6, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_profiles', to='utils.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user profile',
                'verbose_name_plural': 'user profiles',
            },
        ),
        migrations.CreateModel(
            name='UserSocialLinks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('twitter', models.URLField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('tiktok', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user social links',
                'verbose_name_plural': 'user social links',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['uuid'], name='users_user_uuid_0206f4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_practitioner'], name='users_user_is_prac_0ac490_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['account_status'], name='users_user_account_053b62_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['phone_number'], name='users_user_phone_n_7fe504_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_active'], name='users_user_last_ac_27a76d_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavoritepractitioner',
            index=models.Index(fields=['user', 'created_at'], name='users_userf_user_id_f9fe1f_idx'),
        ),
        migrations.AddIndex(
            model_name='userfavoritepractitioner',
            index=models.Index(fields=['practitioner'], name='users_userf_practit_82a7b3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userfavoritepractitioner',
            unique_together={('user', 'practitioner')},
        ),
    ]
