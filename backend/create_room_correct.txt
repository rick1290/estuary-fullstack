from services.models import ServiceSession
from rooms.models import Room
import uuid

# Get the service session
session = ServiceSession.objects.get(id=32)
print(f"Found session: {session.title or 'Untitled'} (ID: {session.id})")

# Check if it already has a room
existing_room = Room.objects.filter(service_session=session).first()
if existing_room:
    print(f"Session already has a room: {existing_room.room_id}")
    print(f"Room URL: /room/session/{session.id}/lobby")
else:
    # Generate unique room name
    room_name = f"session-{session.id}-{uuid.uuid4().hex[:8]}"
    
    # Create a room for this session
    room = Room.objects.create(
        name=f"{session.service.name} - {session.title or 'Session'}",
        room_type='group' if session.max_participants > 1 else 'individual',
        livekit_room_name=room_name,
        service_session=session,
        max_participants=session.max_participants or session.service.max_participants or 50,
        scheduled_start=session.start_time,
        scheduled_end=session.end_time,
        created_by=session.service.primary_practitioner.user if session.service.primary_practitioner else None
    )
    
    # The room relationship is already set through service_session
    print(f"Created room: {room.room_id}")
    print(f"Room name: {room.livekit_room_name}")
    print(f"Room URL: /room/session/{session.id}/lobby")