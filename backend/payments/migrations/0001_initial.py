# Generated by Django 5.1.3 on 2025-06-04 16:07

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalServiceFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('fee_type', models.CharField(choices=[('percentage', 'Percentage'), ('fixed', 'Fixed Amount')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_practitioner_responsible', models.BooleanField(default=False, help_text='If True, this fee is deducted from practitioner earnings')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'external_service_fees',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('payment_method', models.CharField(choices=[('stripe', 'Stripe'), ('credits', 'Credits'), ('manual', 'Manual')], default='stripe', max_length=20)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=200)),
                ('stripe_payment_method_id', models.CharField(blank=True, max_length=200)),
                ('subtotal_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('credits_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20)),
                ('order_type', models.CharField(choices=[('direct', 'Direct Service Purchase'), ('credit', 'Credit Purchase'), ('package', 'Package Purchase'), ('subscription', 'Subscription')], default='direct', max_length=20)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('tax_details', models.JSONField(blank=True, default=dict)),
                ('audit_log', models.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.CreateModel(
            name='PackageCompletionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('partially_completed', 'Partially Completed'), ('completed', 'Completed'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('completed_sessions', models.PositiveIntegerField(default=0)),
                ('payout_processed', models.BooleanField(default=False)),
                ('payout_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_payout_percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('last_payout_date', models.DateTimeField(blank=True, null=True)),
                ('total_paid_credits', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
            ],
            options={
                'db_table': 'package_completion_records',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stripe_payment_method_id', models.CharField(max_length=200, unique=True)),
                ('brand', models.CharField(choices=[('visa', 'Visa'), ('mastercard', 'Mastercard'), ('amex', 'American Express'), ('discover', 'Discover'), ('diners', 'Diners Club'), ('jcb', 'JCB'), ('unionpay', 'UnionPay'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('last4', models.CharField(max_length=4)),
                ('exp_month', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)])),
                ('exp_year', models.PositiveSmallIntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='PractitionerCreditTransaction',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('credits_earned', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('commission', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('commission_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('net_credits', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payout_status', models.CharField(choices=[('pending', 'Pending'), ('ready', 'Ready for Payout'), ('approved', 'Approved'), ('paid', 'Paid'), ('rejected', 'Rejected'), ('on_hold', 'On Hold')], default='pending', max_length=20)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('audit_log', models.JSONField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional information about this transaction', null=True)),
                ('transaction_type', models.CharField(default='booking_completion', help_text='Source of the transaction (e.g., booking_completion, package_partial, refund)', max_length=50)),
                ('batch_id', models.UUIDField(blank=True, help_text='ID for grouping related transactions', null=True)),
                ('ready_for_payout_date', models.DateTimeField(blank=True, null=True)),
                ('external_fees', models.JSONField(blank=True, help_text='Details of external fees applied to this transaction', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PractitionerPayout',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('payout_date', models.DateTimeField(blank=True, null=True)),
                ('credits_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cash_payout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('commission_collected', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('stripe_account_id', models.TextField(blank=True, null=True)),
                ('stripe_transfer_id', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('batch_id', models.UUIDField(blank=True, null=True)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('notes', models.TextField(blank=True, null=True)),
                ('payment_method', models.CharField(default='stripe', help_text='Method used for payout (e.g., stripe, manual)', max_length=50)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('transaction_fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='PractitionerSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('past_due', 'Past Due'), ('trialing', 'Trialing'), ('unpaid', 'Unpaid')], default='active', max_length=20)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_annual', models.BooleanField(default=False)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=100, null=True)),
                ('auto_renew', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'practitioner_subscriptions',
            },
        ),
        migrations.CreateModel(
            name='ServiceTypeCommission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_rate', models.DecimalField(decimal_places=2, help_text='Base commission rate as a percentage (e.g., 15.00 for 15%)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'service_type_commissions',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('monthly_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('annual_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('features', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'subscription_tiers',
                'ordering': ['order', 'monthly_price'],
            },
        ),
        migrations.CreateModel(
            name='TierCommissionAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustment_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Adjustment to base rate in percentage points (e.g., -5.00 reduces rate by 5%)', max_digits=5, validators=[django.core.validators.MinValueValidator(-100), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'tier_commission_adjustments',
            },
        ),
        migrations.CreateModel(
            name='UserCreditBalance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
            ],
        ),
        migrations.CreateModel(
            name='CreditTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Positive for credits added, negative for credits consumed', max_digits=10)),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase'), ('consumption', 'Consumption'), ('refund', 'Refund'), ('adjustment', 'Adjustment'), ('bonus', 'Bonus'), ('transfer', 'Transfer')], max_length=20)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('exchange_rate', models.DecimalField(blank=True, decimal_places=6, help_text='Exchange rate if currency conversion was applied', max_digits=10, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_expired', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, help_text='Human-readable description')),
                ('audit_log', models.JSONField(blank=True, default=list)),
                ('booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_credit_transactions', to='bookings.booking')),
            ],
        ),
    ]
