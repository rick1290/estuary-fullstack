"""
Django settings for estuary project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-rxts$d4^xi5us3dc21bi8o_25if^vd7=idqjnfn(kf+s)behcl"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']


# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Third party apps
    "rest_framework",
    "django_filters",
    "drf_spectacular",
    "corsheaders",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    
    # Local apps
    "users.apps.UsersConfig",
    "analytics",
    "bookings",
    "common",
    "community",
    "integrations",
    "locations",
    "media",
    "messaging",
    "notifications",
    "payments",
    "practitioners",
    "referrals",
    "reviews",
    "rooms",
    "services",
    "streams",
    "utils",
    "workflows",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # Must be before CommonMiddleware
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "estuary.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "estuary.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", default="estuary"),
        "USER": os.getenv("POSTGRES_USER", default="estuary"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", default="estuary"),
        "HOST": os.getenv("POSTGRES_HOST", default="postgres"),
        "PORT": os.getenv("POSTGRES_PORT", default="5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Path where static files will be collected
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'users.User'

# Django REST Framework configuration
# Django REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.CustomJWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_PAGINATION_CLASS': 'core.api.pagination.StandardResultsSetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'EXCEPTION_HANDLER': 'core.api.exceptions.custom_exception_handler',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour',
    },
    'DATETIME_FORMAT': '%Y-%m-%dT%H:%M:%S.%fZ',
    'DATETIME_INPUT_FORMATS': ['%Y-%m-%dT%H:%M:%S.%fZ', '%Y-%m-%dT%H:%M:%SZ'],
}

# DRF Spectacular settings for OpenAPI schema
SPECTACULAR_SETTINGS = {
    'TITLE': 'Estuary API',
    'DESCRIPTION': '''
    # Estuary Wellness Marketplace API
    
    ## Overview
    The Estuary API provides a comprehensive platform for wellness services, connecting practitioners with clients through an intuitive marketplace. Our API supports various service types including sessions, workshops, and courses.
    
    ## Key Features
    - **Practitioner Management**: Complete profile and service management for wellness professionals
    - **Booking System**: Flexible booking for sessions, workshops, and courses
    - **Payment Processing**: Secure payment handling with credit-based system
    - **Real-time Communications**: Video streaming and messaging capabilities
    - **Content Platform**: Support for streaming content and media management
    
    ## Authentication
    All API endpoints require authentication using JWT tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-token>
    ```
    
    ## Rate Limiting
    - Anonymous users: 100 requests per hour
    - Authenticated users: 1000 requests per hour
    
    ## API Versioning
    The API uses URL-based versioning. Current version: v1
    
    ## Response Format
    All responses are in JSON format with consistent error handling.
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # Remove path prefix settings that might be causing issues
    # 'SCHEMA_PATH_PREFIX': r'/api/v1/drf',
    # 'SCHEMA_PATH_PREFIX_TRIM': True,
    # 'SCHEMA_PATH_PREFIX_INSERT': '',
    'DISABLE_ERRORS_AND_WARNINGS': False,
    'AUTHENTICATION_WHITELIST': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    
    # Authentication configuration
    'SECURITY': [{
        'bearerAuth': []
    }],
    'SECURITY_DEFINITIONS': {
        'bearerAuth': {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
            'description': 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'
        }
    },
    
    # Component configuration
    'COMPONENT_SPLIT_REQUEST': True,
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    
    # Swagger UI configuration
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
        'defaultModelsExpandDepth': 2,
        'defaultModelExpandDepth': 2,
        'defaultModelRendering': 'example',
        'displayRequestDuration': True,
        'docExpansion': 'none',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tryItOutEnabled': True,
    },
    
    # ReDoc UI configuration
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'disableSearch': False,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
    },
    
    # API tags for organization
    'TAGS': [
        {'name': 'Auth', 'description': 'Authentication and authorization endpoints'},
        {'name': 'Users', 'description': 'User profile and account management'},
        {'name': 'Practitioners', 'description': 'Practitioner profiles, services, and availability'},
        {'name': 'Services', 'description': 'Service catalog including sessions, workshops, and courses'},
        {'name': 'Bookings', 'description': 'Booking creation, management, and scheduling'},
        {'name': 'Availability', 'description': 'Practitioner availability and time slot management'},
        {'name': 'Payments', 'description': 'Payment processing, credits, and transactions'},
        {'name': 'Subscriptions', 'description': 'Practitioner subscription management'},
        {'name': 'Reviews', 'description': 'Reviews and ratings for practitioners and services'},
        {'name': 'Locations', 'description': 'Service locations and venue management'},
        {'name': 'Media', 'description': 'Media upload and management'},
        {'name': 'Messaging', 'description': 'Real-time messaging between users'},
        {'name': 'Notifications', 'description': 'Push notifications and alerts'},
        {'name': 'Streams', 'description': 'Live streaming and video content'},
        {'name': 'Rooms', 'description': 'Video room management for sessions'},
        {'name': 'Community', 'description': 'Community features and interactions'},
        {'name': 'Analytics', 'description': 'Analytics and reporting endpoints'},
        {'name': 'Search', 'description': 'Search practitioners and services'},
        {'name': 'Referrals', 'description': 'Referral program management'},
    ],
    
    # Example value configuration
    'EXAMPLES_TITLE': 'Example',
    'EXAMPLES_DESCRIPTION_KEY': 'description',
    'EXAMPLES_VALUE_KEY': 'value',
    
    # Schema generation settings
    'PREPROCESSING_HOOKS': [
        'api.v1.schema.preprocessing_filter_spec',
    ],
    'POSTPROCESSING_HOOKS': [
        'drf_spectacular.hooks.postprocess_schema_enums',
        'api.v1.schema.postprocess_schema_responses',
    ],
    
    # Operation ID generation
    'OPERATION_ID_OVERRIDES': {
        'TokenObtainPairView': 'auth_login',
        'TokenRefreshView': 'auth_refresh',
        'TokenVerifyView': 'auth_verify',
        'TokenBlacklistView': 'auth_logout',
    },
    
    # Contact information
    'CONTACT': {
        'name': 'Estuary API Support',
        'email': 'api@estuary.com',
    },
    
    # License information
    'LICENSE': {
        'name': 'Proprietary',
    },
    
    # External documentation
    'EXTERNAL_DOCS': {
        'description': 'Find more info here',
        'url': 'https://docs.estuary.com',
    },
    
    # Enum name overrides - commented out due to duplication issues
    # 'ENUM_NAME_OVERRIDES': {
    #     'ValidationErrorEnum': 'drf_spectacular.openapi.ValidationError',
    #     'ParseErrorEnum': 'drf_spectacular.openapi.ParseError',
    #     'AuthenticationFailedEnum': 'drf_spectacular.openapi.AuthenticationFailed',
    #     'NotAuthenticatedEnum': 'drf_spectacular.openapi.NotAuthenticated',
    #     'PermissionDeniedEnum': 'drf_spectacular.openapi.PermissionDenied',
    #     'NotFoundEnum': 'drf_spectacular.openapi.NotFound',
    # },
}

# JWT Configuration
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    # Custom token fields to match existing FastAPI tokens
    'TOKEN_OBTAIN_SERIALIZER': 'users.api.v1.serializers.CustomTokenObtainPairSerializer',
    'TOKEN_REFRESH_SERIALIZER': 'rest_framework_simplejwt.serializers.TokenRefreshSerializer',
}

# ============================================================================
# LiveKit Configuration
# ============================================================================

# LiveKit API credentials
LIVEKIT_API_KEY = os.getenv('LIVEKIT_API_KEY', '')
LIVEKIT_API_SECRET = os.getenv('LIVEKIT_API_SECRET', '')
LIVEKIT_HOST = os.getenv('LIVEKIT_HOST', 'https://your-instance.livekit.cloud')

# LiveKit room defaults
LIVEKIT_ROOM_DEFAULTS = {
    'empty_timeout': 600,  # 10 minutes
    'max_participants': 100,
    'enable_recording': False,  # Practitioner decides per room
    'enable_e2ee': False,  # End-to-end encryption
}

# LiveKit SIP/PSTN configuration (for phone dial-in)
LIVEKIT_SIP_ENABLED = os.getenv('LIVEKIT_SIP_ENABLED', 'False').lower() == 'true'
LIVEKIT_SIP_PROVIDER = os.getenv('LIVEKIT_SIP_PROVIDER', 'twilio')  # twilio, telnyx, vonage
LIVEKIT_SIP_TRUNK_ID = os.getenv('LIVEKIT_SIP_TRUNK_ID', '')
LIVEKIT_SIP_DEFAULT_REGION = os.getenv('LIVEKIT_SIP_DEFAULT_REGION', 'US')

# LiveKit webhook secret (for verifying webhooks)
LIVEKIT_WEBHOOK_SECRET = os.getenv('LIVEKIT_WEBHOOK_SECRET', LIVEKIT_API_SECRET)

# LiveKit recording storage (S3/CloudFlare R2)
LIVEKIT_RECORDING_STORAGE = {
    'type': os.getenv('LIVEKIT_RECORDING_STORAGE_TYPE', 's3'),  # s3, r2, azure
    'bucket': os.getenv('LIVEKIT_RECORDING_BUCKET', 'estuary-recordings'),
    'region': os.getenv('LIVEKIT_RECORDING_REGION', 'us-east-1'),
    'access_key': os.getenv('LIVEKIT_RECORDING_ACCESS_KEY', ''),
    'secret_key': os.getenv('LIVEKIT_RECORDING_SECRET_KEY', ''),
    'endpoint': os.getenv('LIVEKIT_RECORDING_ENDPOINT', ''),  # For R2/MinIO
}

# ============================================================================
# Stripe Configuration
# ============================================================================

# Stripe API keys
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')

# Stripe Connect settings (for practitioner payouts)
STRIPE_CONNECT_CLIENT_ID = os.getenv('STRIPE_CONNECT_CLIENT_ID', '')
STRIPE_CONNECT_WEBHOOK_SECRET = os.getenv('STRIPE_CONNECT_WEBHOOK_SECRET', '')

# Stripe product/price IDs (for fixed products like credit packages)
STRIPE_CREDIT_PACKAGES = {
    '10_credits': os.getenv('STRIPE_PRICE_10_CREDITS', ''),
    '25_credits': os.getenv('STRIPE_PRICE_25_CREDITS', ''),
    '50_credits': os.getenv('STRIPE_PRICE_50_CREDITS', ''),
    '100_credits': os.getenv('STRIPE_PRICE_100_CREDITS', ''),
}

# Stripe settings
STRIPE_CURRENCY = 'usd'
STRIPE_AUTOMATIC_TAX_ENABLED = os.getenv('STRIPE_AUTOMATIC_TAX_ENABLED', 'False').lower() == 'true'
STRIPE_STATEMENT_DESCRIPTOR = 'ESTUARY'

# Payment settings
PAYMENT_MINIMUM_AMOUNT_CENTS = 100  # $1.00 minimum
PAYMENT_HOLD_PERIOD_HOURS = 48  # Hold period before practitioner can withdraw
PAYOUT_MINIMUM_AMOUNT_CENTS = 5000  # $50.00 minimum payout

# ============================================================================
# Cloudflare R2 Storage Configuration
# ============================================================================

CLOUDFLARE_R2_ACCESS_KEY_ID = os.getenv('CLOUDFLARE_R2_ACCESS_KEY_ID', '')
CLOUDFLARE_R2_SECRET_ACCESS_KEY = os.getenv('CLOUDFLARE_R2_SECRET_ACCESS_KEY', '')
CLOUDFLARE_R2_STORAGE_BUCKET_NAME = os.getenv('CLOUDFLARE_R2_STORAGE_BUCKET_NAME', '')
CLOUDFLARE_R2_ENDPOINT_URL = os.getenv('CLOUDFLARE_R2_ENDPOINT_URL', '')
CLOUDFLARE_R2_REGION_NAME = os.getenv('CLOUDFLARE_R2_REGION_NAME', 'auto')
CLOUDFLARE_R2_CUSTOM_DOMAIN = os.getenv('CLOUDFLARE_R2_CUSTOM_DOMAIN', '')

# ============================================================================
# Temporal Configuration
# ============================================================================

TEMPORAL_HOST = os.getenv('TEMPORAL_HOST', 'localhost:7233')
TEMPORAL_NAMESPACE = os.getenv('TEMPORAL_NAMESPACE', 'default')
TEMPORAL_TASK_QUEUE = os.getenv('TEMPORAL_TASK_QUEUE', 'estuary-main')

# Worker configuration
TEMPORAL_MAX_CONCURRENT_ACTIVITIES = int(os.getenv('TEMPORAL_MAX_CONCURRENT_ACTIVITIES', '100'))
TEMPORAL_MAX_CACHED_WORKFLOWS = int(os.getenv('TEMPORAL_MAX_CACHED_WORKFLOWS', '500'))

# ============================================================================
# CORS Configuration
# ============================================================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Frontend development
    "http://localhost:8000",  # API development
    "http://localhost:8001",  # Alternative API port
]

# Allow credentials to be included in CORS requests (for cookies/auth)
CORS_ALLOW_CREDENTIALS = True

# Headers that can be used during the actual request
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# ============================================================================
# Security Settings
# ============================================================================

# Security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Session security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

# CSRF settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'
