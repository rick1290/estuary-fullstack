"""
Django settings for estuary project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-rxts$d4^xi5us3dc21bi8o_25if^vd7=idqjnfn(kf+s)behcl"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost']


# Application definition

INSTALLED_APPS = [
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # Local apps
    "users.apps.UsersConfig",
    "analytics",
    "bookings",
    "common",
    "community",
    "integrations",
    "locations",
    "media",
    "messaging",
    "notifications",
    "payments",
    "practitioners",
    "referrals",
    "reviews",
    "rooms",
    "services",
    "streams",
    "utils",
    "workflows",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "estuary.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "estuary.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB", default="estuary"),
        "USER": os.getenv("POSTGRES_USER", default="estuary"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD", default="estuary"),
        "HOST": os.getenv("POSTGRES_HOST", default="postgres"),
        "PORT": os.getenv("POSTGRES_PORT", default="5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Path where static files will be collected
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = 'users.User'

# ============================================================================
# LiveKit Configuration
# ============================================================================

# LiveKit API credentials
LIVEKIT_API_KEY = os.getenv('LIVEKIT_API_KEY', '')
LIVEKIT_API_SECRET = os.getenv('LIVEKIT_API_SECRET', '')
LIVEKIT_HOST = os.getenv('LIVEKIT_HOST', 'https://your-instance.livekit.cloud')

# LiveKit room defaults
LIVEKIT_ROOM_DEFAULTS = {
    'empty_timeout': 600,  # 10 minutes
    'max_participants': 100,
    'enable_recording': False,  # Practitioner decides per room
    'enable_e2ee': False,  # End-to-end encryption
}

# LiveKit SIP/PSTN configuration (for phone dial-in)
LIVEKIT_SIP_ENABLED = os.getenv('LIVEKIT_SIP_ENABLED', 'False').lower() == 'true'
LIVEKIT_SIP_PROVIDER = os.getenv('LIVEKIT_SIP_PROVIDER', 'twilio')  # twilio, telnyx, vonage
LIVEKIT_SIP_TRUNK_ID = os.getenv('LIVEKIT_SIP_TRUNK_ID', '')
LIVEKIT_SIP_DEFAULT_REGION = os.getenv('LIVEKIT_SIP_DEFAULT_REGION', 'US')

# LiveKit webhook secret (for verifying webhooks)
LIVEKIT_WEBHOOK_SECRET = os.getenv('LIVEKIT_WEBHOOK_SECRET', LIVEKIT_API_SECRET)

# LiveKit recording storage (S3/CloudFlare R2)
LIVEKIT_RECORDING_STORAGE = {
    'type': os.getenv('LIVEKIT_RECORDING_STORAGE_TYPE', 's3'),  # s3, r2, azure
    'bucket': os.getenv('LIVEKIT_RECORDING_BUCKET', 'estuary-recordings'),
    'region': os.getenv('LIVEKIT_RECORDING_REGION', 'us-east-1'),
    'access_key': os.getenv('LIVEKIT_RECORDING_ACCESS_KEY', ''),
    'secret_key': os.getenv('LIVEKIT_RECORDING_SECRET_KEY', ''),
    'endpoint': os.getenv('LIVEKIT_RECORDING_ENDPOINT', ''),  # For R2/MinIO
}

# ============================================================================
# Stripe Configuration
# ============================================================================

# Stripe API keys
STRIPE_PUBLISHABLE_KEY = os.getenv('STRIPE_PUBLISHABLE_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WEBHOOK_SECRET = os.getenv('STRIPE_WEBHOOK_SECRET', '')

# Stripe Connect settings (for practitioner payouts)
STRIPE_CONNECT_CLIENT_ID = os.getenv('STRIPE_CONNECT_CLIENT_ID', '')
STRIPE_CONNECT_WEBHOOK_SECRET = os.getenv('STRIPE_CONNECT_WEBHOOK_SECRET', '')

# Stripe product/price IDs (for fixed products like credit packages)
STRIPE_CREDIT_PACKAGES = {
    '10_credits': os.getenv('STRIPE_PRICE_10_CREDITS', ''),
    '25_credits': os.getenv('STRIPE_PRICE_25_CREDITS', ''),
    '50_credits': os.getenv('STRIPE_PRICE_50_CREDITS', ''),
    '100_credits': os.getenv('STRIPE_PRICE_100_CREDITS', ''),
}

# Stripe settings
STRIPE_CURRENCY = 'usd'
STRIPE_AUTOMATIC_TAX_ENABLED = os.getenv('STRIPE_AUTOMATIC_TAX_ENABLED', 'False').lower() == 'true'
STRIPE_STATEMENT_DESCRIPTOR = 'ESTUARY'

# Payment settings
PAYMENT_MINIMUM_AMOUNT_CENTS = 100  # $1.00 minimum
PAYMENT_HOLD_PERIOD_HOURS = 48  # Hold period before practitioner can withdraw
PAYOUT_MINIMUM_AMOUNT_CENTS = 5000  # $50.00 minimum payout

# ============================================================================
# Cloudflare R2 Storage Configuration
# ============================================================================

CLOUDFLARE_R2_ACCESS_KEY_ID = os.getenv('CLOUDFLARE_R2_ACCESS_KEY_ID', '')
CLOUDFLARE_R2_SECRET_ACCESS_KEY = os.getenv('CLOUDFLARE_R2_SECRET_ACCESS_KEY', '')
CLOUDFLARE_R2_STORAGE_BUCKET_NAME = os.getenv('CLOUDFLARE_R2_STORAGE_BUCKET_NAME', '')
CLOUDFLARE_R2_ENDPOINT_URL = os.getenv('CLOUDFLARE_R2_ENDPOINT_URL', '')
CLOUDFLARE_R2_REGION_NAME = os.getenv('CLOUDFLARE_R2_REGION_NAME', 'auto')
CLOUDFLARE_R2_CUSTOM_DOMAIN = os.getenv('CLOUDFLARE_R2_CUSTOM_DOMAIN', '')

# ============================================================================
# Temporal Configuration
# ============================================================================

TEMPORAL_HOST = os.getenv('TEMPORAL_HOST', 'localhost:7233')
TEMPORAL_NAMESPACE = os.getenv('TEMPORAL_NAMESPACE', 'default')
TEMPORAL_TASK_QUEUE = os.getenv('TEMPORAL_TASK_QUEUE', 'estuary-main')

# Worker configuration
TEMPORAL_MAX_CONCURRENT_ACTIVITIES = int(os.getenv('TEMPORAL_MAX_CONCURRENT_ACTIVITIES', '100'))
TEMPORAL_MAX_CACHED_WORKFLOWS = int(os.getenv('TEMPORAL_MAX_CACHED_WORKFLOWS', '500'))
