# Generated by Django 5.1.3 on 2025-06-10 04:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0002_initial'),
        ('practitioners', '0001_initial'),
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='practitioner',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='practitioner_profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='outofoffice',
            name='practitioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='practitioneronboardingprogress',
            name='practitioner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='onboarding_progress', to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='practitioner',
            name='questions',
            field=models.ManyToManyField(blank=True, related_name='practitioners', to='practitioners.question'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='practitioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='scheduleavailability',
            name='practitioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='schedulepreference',
            name='country',
            field=models.ForeignKey(blank=True, help_text='Country for holiday calculations', null=True, on_delete=django.db.models.deletion.SET_NULL, to='locations.country'),
        ),
        migrations.AddField(
            model_name='schedulepreference',
            name='practitioner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='schedule_preferences', to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='scheduletimeslot',
            name='schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='practitioners.schedule'),
        ),
        migrations.AddField(
            model_name='serviceschedule',
            name='practitioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='practitioners.practitioner'),
        ),
        migrations.AddField(
            model_name='serviceschedule',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='services.service'),
        ),
        migrations.AddField(
            model_name='scheduleavailability',
            name='service_schedule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='practitioners.serviceschedule'),
        ),
        migrations.AddField(
            model_name='practitioner',
            name='specializations',
            field=models.ManyToManyField(blank=True, related_name='practitioners', to='practitioners.specialize'),
        ),
        migrations.AddField(
            model_name='practitioner',
            name='styles',
            field=models.ManyToManyField(blank=True, related_name='practitioners', to='practitioners.style'),
        ),
        migrations.AddField(
            model_name='practitioner',
            name='topics',
            field=models.ManyToManyField(blank=True, related_name='practitioners', to='practitioners.topic'),
        ),
        migrations.AddField(
            model_name='verificationdocument',
            name='practitioner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_documents', to='practitioners.practitioner'),
        ),
        migrations.AddIndex(
            model_name='practitioneronboardingprogress',
            index=models.Index(fields=['status'], name='onb_status_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioneronboardingprogress',
            index=models.Index(fields=['current_step'], name='onb_step_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['practitioner'], name='schedule_practitioner_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['is_default'], name='schedule_default_idx'),
        ),
        migrations.AddIndex(
            model_name='schedule',
            index=models.Index(fields=['is_active'], name='schedule_active_idx'),
        ),
        migrations.AddConstraint(
            model_name='schedule',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('practitioner', 'is_default'), name='unique_default_schedule_per_practitioner'),
        ),
        migrations.AddIndex(
            model_name='schedulepreference',
            index=models.Index(fields=['practitioner'], name='sp_practitioner_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduletimeslot',
            index=models.Index(fields=['schedule'], name='sts_schedule_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduletimeslot',
            index=models.Index(fields=['day'], name='sts_day_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduletimeslot',
            index=models.Index(fields=['is_active'], name='sts_active_idx'),
        ),
        migrations.AddConstraint(
            model_name='scheduletimeslot',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='sts_end_time_after_start_time'),
        ),
        migrations.AddIndex(
            model_name='serviceschedule',
            index=models.Index(fields=['practitioner'], name='ss_practitioner_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceschedule',
            index=models.Index(fields=['service'], name='ss_service_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceschedule',
            index=models.Index(fields=['day'], name='ss_day_idx'),
        ),
        migrations.AddConstraint(
            model_name='serviceschedule',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='ss_end_time_after_start_time'),
        ),
        migrations.AddConstraint(
            model_name='scheduleavailability',
            constraint=models.CheckConstraint(condition=models.Q(('end_time__gt', models.F('start_time'))), name='sa_end_time_after_start_time'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['is_verified', 'practitioner_status'], name='practitione_is_veri_445ade_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['featured'], name='practitione_feature_673f5d_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['practitioner_status'], name='practitione_practit_43bb21_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['user'], name='practitione_user_id_60db77_idx'),
        ),
        migrations.AddIndex(
            model_name='practitioner',
            index=models.Index(fields=['next_available_date'], name='practitione_next_av_6bdfcf_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationdocument',
            index=models.Index(fields=['practitioner'], name='vd_practitioner_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationdocument',
            index=models.Index(fields=['document_type'], name='vd_type_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationdocument',
            index=models.Index(fields=['status'], name='vd_status_idx'),
        ),
        migrations.AddIndex(
            model_name='verificationdocument',
            index=models.Index(fields=['expires_at'], name='vd_expiry_idx'),
        ),
    ]
