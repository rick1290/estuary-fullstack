# Generated by Django 5.1.7 on 2025-03-24 06:13

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("practitioners", "0001_initial"),
        ("services", "0001_initial"),
        ("utils", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="practitioner",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="practitioner_profile",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="outofoffice",
            name="practitioner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="practitioneronboardingprogress",
            name="practitioner",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="onboarding_progress",
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="questions",
            field=models.ManyToManyField(
                blank=True, related_name="practitioners", to="practitioners.question"
            ),
        ),
        migrations.AddField(
            model_name="schedule",
            name="practitioner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="schedules",
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="scheduleavailability",
            name="practitioner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="schedulepreference",
            name="country",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="utils.country",
            ),
        ),
        migrations.AddField(
            model_name="schedulepreference",
            name="practitioner",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="scheduletimeslot",
            name="schedule",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="time_slots",
                to="practitioners.schedule",
            ),
        ),
        migrations.AddField(
            model_name="serviceschedule",
            name="practitioner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="practitioners.practitioner",
            ),
        ),
        migrations.AddField(
            model_name="serviceschedule",
            name="service",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to="services.service"
            ),
        ),
        migrations.AddField(
            model_name="scheduleavailability",
            name="service_schedule",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="practitioners.serviceschedule",
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="specializations",
            field=models.ManyToManyField(
                blank=True, related_name="practitioners", to="practitioners.specialize"
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="styles",
            field=models.ManyToManyField(
                blank=True, related_name="practitioners", to="practitioners.style"
            ),
        ),
        migrations.AddField(
            model_name="practitioner",
            name="topics",
            field=models.ManyToManyField(
                blank=True, related_name="practitioners", to="practitioners.topic"
            ),
        ),
        migrations.AddIndex(
            model_name="practitioneronboardingprogress",
            index=models.Index(fields=["status"], name="onb_status_idx"),
        ),
        migrations.AddIndex(
            model_name="practitioneronboardingprogress",
            index=models.Index(fields=["current_step"], name="onb_step_idx"),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(
                fields=["practitioner"], name="schedule_practitioner_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(fields=["is_default"], name="schedule_default_idx"),
        ),
        migrations.AddIndex(
            model_name="schedule",
            index=models.Index(fields=["is_active"], name="schedule_active_idx"),
        ),
        migrations.AddConstraint(
            model_name="schedule",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("practitioner", "is_default"),
                name="unique_default_schedule_per_practitioner",
            ),
        ),
        migrations.AddIndex(
            model_name="schedulepreference",
            index=models.Index(fields=["practitioner"], name="sp_practitioner_idx"),
        ),
        migrations.AddIndex(
            model_name="scheduletimeslot",
            index=models.Index(fields=["schedule"], name="sts_schedule_idx"),
        ),
        migrations.AddIndex(
            model_name="scheduletimeslot",
            index=models.Index(fields=["day"], name="sts_day_idx"),
        ),
        migrations.AddIndex(
            model_name="scheduletimeslot",
            index=models.Index(fields=["is_active"], name="sts_active_idx"),
        ),
        migrations.AddConstraint(
            model_name="scheduletimeslot",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_time__gt", models.F("start_time"))),
                name="sts_end_time_after_start_time",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceschedule",
            index=models.Index(fields=["practitioner"], name="ss_practitioner_idx"),
        ),
        migrations.AddIndex(
            model_name="serviceschedule",
            index=models.Index(fields=["service"], name="ss_service_idx"),
        ),
        migrations.AddIndex(
            model_name="serviceschedule",
            index=models.Index(fields=["day"], name="ss_day_idx"),
        ),
        migrations.AddConstraint(
            model_name="serviceschedule",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_time__gt", models.F("start_time"))),
                name="ss_end_time_after_start_time",
            ),
        ),
        migrations.AddConstraint(
            model_name="scheduleavailability",
            constraint=models.CheckConstraint(
                condition=models.Q(("end_time__gt", models.F("start_time"))),
                name="sa_end_time_after_start_time",
            ),
        ),
        migrations.AddIndex(
            model_name="practitioner",
            index=models.Index(
                fields=["is_verified"], name="practitione_is_veri_491663_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="practitioner",
            index=models.Index(
                fields=["featured"], name="practitione_feature_0a72f7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="practitioner",
            index=models.Index(
                fields=["practitioner_status"], name="practitione_practit_64df68_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="practitioner",
            index=models.Index(
                fields=["average_rating"], name="practitione_average_fba9bb_idx"
            ),
        ),
    ]
