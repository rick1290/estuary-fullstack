# Generated by Django 5.1.3 on 2025-06-10 04:01

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('practitioners', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StreamCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Stream Category',
                'verbose_name_plural': 'Stream Categories',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StreamPostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StreamPostMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], max_length=20)),
                ('media_url', models.URLField()),
                ('thumbnail_url', models.URLField(blank=True, null=True)),
                ('filename', models.CharField(blank=True, max_length=255, null=True)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('caption', models.TextField(blank=True, null=True)),
                ('alt_text', models.CharField(blank=True, max_length=255, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('processing_error', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='StreamPostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('referrer', models.URLField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='StreamSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tier', models.CharField(choices=[('free', 'Free'), ('entry', 'Entry'), ('premium', 'Premium')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('expired', 'Expired'), ('paused', 'Paused'), ('past_due', 'Past Due')], default='active', max_length=20)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('current_period_start', models.DateTimeField()),
                ('current_period_end', models.DateTimeField()),
                ('canceled_at', models.DateTimeField(blank=True, null=True)),
                ('ends_at', models.DateTimeField(blank=True, null=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('previous_tier', models.CharField(blank=True, choices=[('free', 'Free'), ('entry', 'Entry'), ('premium', 'Premium')], max_length=20, null=True)),
                ('tier_changed_at', models.DateTimeField(blank=True, null=True)),
                ('last_viewed_at', models.DateTimeField(blank=True, null=True)),
                ('total_tips_cents', models.IntegerField(default=0)),
                ('notify_new_posts', models.BooleanField(default=True)),
                ('notify_live_streams', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Stream Subscription',
                'verbose_name_plural': 'Stream Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='StreamTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('amount_cents', models.IntegerField(validators=[django.core.validators.MinValueValidator(100)])),
                ('message', models.TextField(blank=True, null=True)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('stripe_payment_intent_id', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('commission_rate', models.DecimalField(decimal_places=2, help_text='Platform commission percentage at time of tip', max_digits=5)),
                ('commission_amount_cents', models.IntegerField()),
                ('net_amount_cents', models.IntegerField()),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('title', models.CharField(max_length=255)),
                ('tagline', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField()),
                ('about', models.TextField(blank=True, help_text='Detailed about section', null=True)),
                ('cover_image_url', models.URLField(blank=True, null=True)),
                ('profile_image_url', models.URLField(blank=True, null=True)),
                ('intro_video_url', models.URLField(blank=True, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('free_tier_name', models.CharField(default='Free', max_length=50)),
                ('entry_tier_name', models.CharField(default='Entry', max_length=50)),
                ('premium_tier_name', models.CharField(default='Premium', max_length=50)),
                ('entry_tier_price_cents', models.IntegerField(help_text='Monthly price in cents for entry tier', validators=[django.core.validators.MinValueValidator(100)])),
                ('premium_tier_price_cents', models.IntegerField(help_text='Monthly price in cents for premium tier', validators=[django.core.validators.MinValueValidator(100)])),
                ('free_tier_description', models.TextField(blank=True, null=True)),
                ('entry_tier_description', models.TextField(blank=True, null=True)),
                ('premium_tier_description', models.TextField(blank=True, null=True)),
                ('free_tier_perks', models.JSONField(blank=True, default=list)),
                ('entry_tier_perks', models.JSONField(blank=True, default=list)),
                ('premium_tier_perks', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('allow_comments', models.BooleanField(default=True)),
                ('allow_dms', models.BooleanField(default=False)),
                ('allow_tips', models.BooleanField(default=True)),
                ('preview_post_count', models.PositiveIntegerField(default=3, help_text='Number of posts non-subscribers can preview')),
                ('watermark_media', models.BooleanField(default=True, help_text='Add watermark to media for lower tiers')),
                ('subscriber_count', models.PositiveIntegerField(default=0)),
                ('free_subscriber_count', models.PositiveIntegerField(default=0)),
                ('paid_subscriber_count', models.PositiveIntegerField(default=0)),
                ('post_count', models.PositiveIntegerField(default=0)),
                ('total_revenue_cents', models.BigIntegerField(default=0)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=20.0, help_text='Platform commission percentage', max_digits=5)),
                ('launched_at', models.DateTimeField(blank=True, null=True)),
                ('practitioner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stream', to='practitioners.practitioner')),
                ('categories', models.ManyToManyField(blank=True, related_name='streams', to='streams.streamcategory')),
            ],
            options={
                'verbose_name': 'Stream',
                'verbose_name_plural': 'Streams',
            },
        ),
        migrations.CreateModel(
            name='StreamAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('total_subscribers', models.IntegerField(default=0)),
                ('free_subscribers', models.IntegerField(default=0)),
                ('entry_subscribers', models.IntegerField(default=0)),
                ('premium_subscribers', models.IntegerField(default=0)),
                ('new_subscribers', models.IntegerField(default=0)),
                ('churned_subscribers', models.IntegerField(default=0)),
                ('upgraded_subscribers', models.IntegerField(default=0)),
                ('downgraded_subscribers', models.IntegerField(default=0)),
                ('posts_published', models.IntegerField(default=0)),
                ('total_views', models.IntegerField(default=0)),
                ('unique_viewers', models.IntegerField(default=0)),
                ('total_likes', models.IntegerField(default=0)),
                ('total_comments', models.IntegerField(default=0)),
                ('subscription_revenue_cents', models.IntegerField(default=0)),
                ('tips_revenue_cents', models.IntegerField(default=0)),
                ('total_revenue_cents', models.IntegerField(default=0)),
                ('commission_paid_cents', models.IntegerField(default=0)),
                ('net_revenue_cents', models.IntegerField(default=0)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='streams.stream')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='StreamPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField(help_text='Main text content with rich formatting')),
                ('post_type', models.CharField(choices=[('post', 'Text Post'), ('video', 'Video'), ('audio', 'Audio'), ('image', 'Image'), ('gallery', 'Image Gallery'), ('link', 'External Link'), ('poll', 'Poll')], max_length=20)),
                ('tier_level', models.CharField(choices=[('free', 'Free'), ('entry', 'Entry'), ('premium', 'Premium')], help_text='Minimum tier required to view this post', max_length=20)),
                ('teaser_text', models.CharField(blank=True, help_text='Preview text shown to users below required tier', max_length=500, null=True)),
                ('blur_preview', models.BooleanField(default=True, help_text='Show blurred preview to lower tiers')),
                ('is_published', models.BooleanField(default=True)),
                ('published_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_pinned', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When post becomes unavailable', null=True)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('unique_view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('comment_count', models.PositiveIntegerField(default=0)),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('allow_comments', models.BooleanField(default=True)),
                ('allow_tips', models.BooleanField(default=True)),
                ('poll_options', models.JSONField(blank=True, help_text='List of poll options with votes', null=True)),
                ('poll_ends_at', models.DateTimeField(blank=True, null=True)),
                ('poll_allows_multiple', models.BooleanField(default=False)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('stream', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='streams.stream')),
            ],
            options={
                'verbose_name': 'Stream Post',
                'verbose_name_plural': 'Stream Posts',
                'ordering': ['-is_pinned', '-published_at'],
            },
        ),
        migrations.CreateModel(
            name='StreamPostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_hidden', models.BooleanField(default=False)),
                ('is_reported', models.BooleanField(default=False)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='streams.streampostcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='streams.streampost')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
    ]
