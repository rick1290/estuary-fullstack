# Generated by Django 5.1.3 on 2025-06-10 04:01

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bookings', '0004_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RoomBookingRelation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='RoomParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('identity', models.CharField(max_length=255)),
                ('participant_sid', models.CharField(blank=True, max_length=100)),
                ('role', models.CharField(choices=[('host', 'Host'), ('participant', 'Participant'), ('viewer', 'Viewer'), ('moderator', 'Moderator')], default='participant', max_length=20)),
                ('permissions', models.JSONField(blank=True, default=dict)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(default=0)),
                ('connection_quality', models.CharField(blank=True, max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('is_presenter', models.BooleanField(default=False)),
                ('is_recording_participant', models.BooleanField(default=False)),
                ('is_dial_in', models.BooleanField(default=False)),
                ('messages_sent', models.IntegerField(default=0)),
                ('video_enabled_duration', models.IntegerField(default=0, help_text='Seconds with video on')),
                ('audio_enabled_duration', models.IntegerField(default=0, help_text='Seconds with audio on')),
                ('screen_share_duration', models.IntegerField(default=0, help_text='Seconds sharing screen')),
            ],
            options={
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='RoomRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recording_id', models.CharField(max_length=100, unique=True)),
                ('egress_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('none', 'Not Recording'), ('starting', 'Starting Recording'), ('active', 'Recording Active'), ('stopping', 'Stopping Recording'), ('stopped', 'Recording Stopped'), ('processing', 'Processing'), ('ready', 'Recording Ready'), ('failed', 'Recording Failed')], default='starting', max_length=20)),
                ('started_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(default=0)),
                ('file_url', models.URLField(blank=True)),
                ('file_size_bytes', models.BigIntegerField(default=0)),
                ('file_format', models.CharField(choices=[('mp4', 'MP4'), ('webm', 'WebM'), ('m3u8', 'HLS')], max_length=10)),
                ('storage_provider', models.CharField(choices=[('r2', 'Cloudflare R2'), ('s3', 'AWS S3'), ('gcs', 'Google Cloud Storage')], default='r2', max_length=20)),
                ('storage_bucket', models.CharField(blank=True, max_length=100)),
                ('storage_key', models.CharField(blank=True, max_length=500)),
                ('is_processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('access_expires_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='RoomTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('room_type', models.CharField(choices=[('individual', 'Individual Session'), ('group', 'Group Session'), ('webinar', 'Webinar'), ('broadcast', 'Broadcast')], default='individual', max_length=20)),
                ('empty_timeout', models.IntegerField(default=300, help_text='Seconds to keep room alive when empty (default 5 min)')),
                ('max_participants', models.IntegerField(default=100, help_text='Maximum number of participants allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('video_codec', models.CharField(choices=[('vp8', 'VP8'), ('h264', 'H264'), ('vp9', 'VP9'), ('av1', 'AV1')], default='vp8', max_length=10)),
                ('audio_codec', models.CharField(choices=[('opus', 'Opus'), ('aac', 'AAC')], default='opus', max_length=10)),
                ('recording_enabled', models.BooleanField(default=False)),
                ('recording_audio_only', models.BooleanField(default=False)),
                ('recording_output_format', models.CharField(choices=[('mp4', 'MP4'), ('webm', 'WebM'), ('m3u8', 'HLS')], default='mp4', max_length=10)),
                ('streaming_enabled', models.BooleanField(default=False)),
                ('rtmp_outputs', models.JSONField(blank=True, default=list, help_text='List of RTMP URLs for streaming')),
                ('sip_enabled', models.BooleanField(default=False)),
                ('sip_trunk_id', models.CharField(blank=True, max_length=100)),
                ('sip_dispatch_rule_id', models.CharField(blank=True, max_length=100)),
                ('webhook_url', models.URLField(blank=True, help_text='URL for room event webhooks')),
                ('default_permissions', models.JSONField(blank=True, default=dict, help_text='Default permissions for participants')),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RoomToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.TextField(unique=True)),
                ('identity', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('host', 'Host'), ('participant', 'Participant'), ('viewer', 'Viewer'), ('moderator', 'Moderator')], default='participant', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('is_revoked', models.BooleanField(default=False)),
                ('revoked_at', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VideoToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.TextField(unique=True)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('participant', 'Participant'), ('observer', 'Observer')], default='participant', max_length=20)),
                ('permissions', models.JSONField(blank=True, default=dict)),
                ('expires_at', models.DateTimeField()),
                ('is_used', models.BooleanField(default=False)),
                ('is_revoked', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('public_uuid', models.UUIDField(db_index=True, default=uuid.uuid4, help_text='Public UUID for API exposure', unique=True)),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('room_type', models.CharField(choices=[('individual', 'Individual Session'), ('group', 'Group Session'), ('webinar', 'Webinar'), ('broadcast', 'Broadcast')], default='individual', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('in_use', 'In Use'), ('ended', 'Ended'), ('error', 'Error')], default='pending', max_length=20)),
                ('livekit_room_sid', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('livekit_room_name', models.CharField(max_length=255, unique=True)),
                ('empty_timeout', models.IntegerField(default=300, help_text='Seconds to keep room alive when empty')),
                ('max_participants', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('recording_enabled', models.BooleanField(default=False)),
                ('recording_status', models.CharField(choices=[('none', 'Not Recording'), ('starting', 'Starting Recording'), ('active', 'Recording Active'), ('stopping', 'Stopping Recording'), ('stopped', 'Recording Stopped'), ('processing', 'Processing'), ('ready', 'Recording Ready'), ('failed', 'Recording Failed')], default='none', max_length=20)),
                ('recording_id', models.CharField(blank=True, max_length=100)),
                ('sip_enabled', models.BooleanField(default=False)),
                ('dial_in_number', models.CharField(blank=True, max_length=20)),
                ('dial_in_pin', models.CharField(blank=True, max_length=10)),
                ('scheduled_start', models.DateTimeField(blank=True, null=True)),
                ('scheduled_end', models.DateTimeField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('current_participants', models.IntegerField(default=0)),
                ('peak_participants', models.IntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('total_duration_seconds', models.IntegerField(default=0)),
                ('total_participants', models.IntegerField(default=0)),
                ('booking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='livekit_room', to='bookings.booking')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
